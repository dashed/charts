apiVersion: v1
kind: ConfigMap
metadata:
  name: rutorrent-config
data:
  .rtlocal.rc-elfhosted: |
    # Launch as a daemon
    system.daemon.set = true

     # madvise
    pieces.preload.type.set = 1 
    pieces.memory.max.set = 4096M

    network.send_buffer.size.set = 16M
    network.receive_buffer.size.set = 48M

    # Initialize plugins
    execute2 = {sh,-c,/usr/bin/php /var/www/rutorrent/php/initplugins.php rtorrent &}

    # system is stable, reduce session save from 20min to 12h
    schedule2 = session_save, 1200, 43200, ((session.save))

    # reduce fragmentation
    system.file.allocate = 1

    method.insert = get_port_range, simple|private, "execute.capture=ash,-c,\"cat /port-range/port-range.txt\""
    network.port_range.set = "$cat=$get_port_range="


  .rtorrent.rc-elfhosted: |

    # Instance layout
    method.insert = cfg.basedir, private|const|string, (cat,"/data/rtorrent/")
    method.insert = cfg.download, private|const|string, (cat,"/storage/elfstorage/downloads/")
    method.insert = cfg.download_complete, private|const|string, (cat,(cfg.download),"completed/")
    method.insert = cfg.download_temp, private|const|string, (cat,"/tmp/")
    method.insert = cfg.logs, private|const|string, (cat,(cfg.basedir),"log/")
    method.insert = cfg.session, private|const|string, (cat,(cfg.basedir),".session/")
    method.insert = cfg.watch, private|const|string, (cat,(cfg.basedir),"watch/")
    method.insert = cfg.rundir, private|const|string, (cat,"/var/run/rtorrent/")

    # Gets the full path of data of a torrent (it's a workaround for the possibly empty 'd.base_path' attribute)
    method.insert = d.data_path, simple, "if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))"

    # Default directory to save the downloaded torrents
    # We used this when we downloaded to /tmp
    # directory.default.set = (cat,(cfg.download_temp))

    directory.default.set = (cat,(cfg.download_complete))

    # Default session directory
    session.path.set = (cat,(cfg.session))

    # PID file
    execute.nothrow = sh,-c,(cat,"echo >",(cfg.rundir),"rtorrent.pid"," ",(system.pid))

    # SCGI socket and make it group-writable and secure
    network.scgi.open_local = (cat, (cfg.rundir), "scgi.socket")
    schedule2 = scgi_permission, 0, 0, (cat,"execute.nothrow=chmod,\"g+w,o=\",",(cfg.rundir),"scgi.socket")

    # Listening port for incoming peer traffic
    # network.port_range.set = 50000-50000
    # network.port_random.set = no

    # UDP port to use for DHT
    # dht.port.set = 6881

    # XMLRPC size limit
    network.xmlrpc.size_limit.set = 1M

    # Logging
    ## levels = critical error warn notice info debug
    ## groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
    log.open_file = "log",(cat,(cfg.logs),"rtorrent.log")
    log.open_file = "debug-log",(cat,(cfg.logs),"rtorrent-debug.log")
    log.add_output = "info","log"
    log.add_output = "debug","debug-log"
    log.add_output = "rpc_events","log"
    #log.execute = (cat,(cfg.logs),"execute.log")
    #log.xmlrpc = (cat,(cfg.logs),"xmlrpc.log")



    #### Originally from .rtorrent.rc

    # Maximum and minimum number of peers to connect to per torrent
    throttle.min_peers.normal.set = 1
    throttle.max_peers.normal.set = 100

    # Same as above but for seeding completed torrents (-1 = same as downloading)
    throttle.min_peers.seed.set = 1
    throttle.max_peers.seed.set = 5

    # Maximum number of simultanious uploads per torrent
    throttle.max_uploads.set = 15

    # Global upload and download rate in KiB. "0" for unlimited
    throttle.global_down.max_rate.set_kb = 0
    throttle.global_up.max_rate.set_kb = 0

    # Enable DHT support for trackerless torrents or when all trackers are down
    # May be set to "disable" (completely disable DHT), "off" (do not start DHT),
    # "auto" (start and stop DHT as needed), or "on" (start DHT immediately)
    dht.mode.set = disable

    # Enable peer exchange (for torrents not marked private)
    protocol.pex.set = no

    # Check hash for finished torrents. Might be usefull until the bug is
    # fixed that causes lack of diskspace not to be properly reported
    pieces.hash.on_completion.set = no

    # Set whether the client should try to connect to UDP trackers
    trackers.use_udp.set = yes

    # Set the max amount of memory address space used to mapping file chunks. This refers to memory mapping, not
    # physical memory allocation. Default: 1GB (max_memory_usage)
    # This may also be set using ulimit -m where 3/4 will be allocated to file chunks

    # Alternative calls to bind and ip that should handle dynamic ip's
    #schedule2 = ip_tick,0,1800,ip=rakshasa
    #schedule2 = bind_tick,0,1800,bind=rakshasa

    # Encryption options, set to none (default) or any combination of the following:
    # allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
    protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

    # Set the umask for this process, which is applied to all files created by the program
    system.umask.set = 0022

    # Add a preferred filename encoding to the list
    encoding.add = UTF-8

    # Watch a directory for new torrents, and stop those that have been deleted
    schedule2 = watch_directory, 1, 1, (cat,"load.start=",(cfg.watch),"*.torrent")
    schedule2 = untied_directory, 5, 5, (cat,"stop_untied=",(cfg.watch),"*.torrent")

    # Close torrents when diskspace is low
    schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace,1000M))

    # Move finished (no need Autotools/Automove plugin on ruTorrent)
    # method.insert = d.get_finished_dir, simple, "cat=$cfg.download_complete=,$d.custom1="
    # method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session="
    # method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.data_path=,$d.get_finished_dir="

    # Erase data when torrent deleted (no need erasedata plugin on ruTorrent)
    # method.set_key = event.download.erased,delete_erased,"execute=rm,-rf,--,$d.data_path="   


  05-apply-elfhosted-config.sh: |
    #!/bin/bash
    cp /.rtlocal.rc-elfhosted /etc/rtorrent/.rtlocal.rc
    cp /.rtorrent.rc-elfhosted /data/rtorrent/.rtorrent.rc

  06-wait-for-vpn.sh: |
    #!/usr/bin/env bash

    echo "Waiting for VPN to be connected..."
    while ! grep -s -q "connected" /shared/vpnstatus; do
        # Also account for gluetun-style http controller
        if (/usr/local/bin/curl -s http://localhost:8042/v1/openvpn/status | grep -q running); then
            break
        fi    
        echo "VPN not connected"
        sleep 2
    done
    echo "VPN Connected, starting application..."


  07-set-inbound-port.sh: |
    #!/usr/bin/env bash

    # If we have been given a port by pia/gluetun, prepare for it before starting
    PORT_FILE=/data/rtorrent/forwarded-port
    PORT_FILE_OVERRIDE=/data/rtorrent/forwarded-port-override

    # Apply the port
    if [[ -f "$PORT_FILE_OVERRIDE" ]]; then
        echo -n $(cat $PORT_FILE)-$(cat $PORT_FILE) > /port-range/port-range.txt

    elif [[ -f "$PORT_FILE" ]]; then
        # Wait until a file is found which is less than 5 min old
        until (find $PORT_FILE -mmin 5); do
            echo waiting for port-forward details...
            sleep 5s
        done
        echo -n $(cat $PORT_FILE)-$(cat $PORT_FILE) > /port-range/port-range.txt
    else
        sleep 1m # failsafe incase it took a while to create the file, give us one last chance
        if [[ -f "$PORT_FILE" ]]; then
          echo -n $(cat $PORT_FILE)-$(cat $PORT_FILE) > /port-range/port-range.txt
        else
          echo -n 1234-1234 > /port-range/port-range.txt
        fi
    fi 

  08-mam-cookies.sh: |
    #!/usr/bin/with-contenv sh

    # Special case for MAM users

    # Apply the port

    if [[ -v $MAM_ID ]]; then
        # Apply the dynamic seedbox request
        /usr/local/bin/curl -b 'mam_id=${MAM_ID}' https://t.myanonamouse.net/json/dynamicSeedbox.php -o /data/rtorrent/mam_id-curl-output.log
    fi 